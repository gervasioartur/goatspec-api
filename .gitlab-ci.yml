image: maven:3-eclipse-temurin-21-alpine

variables:
  GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task
  SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: "/certs"
  IMAGE_TAG: $CI_COMMIT_SHORT_SHA

  MAVEN_OPTS: >-
    -Dhttps.protocols=TLSv1.2
    -Dmaven.repo.local=$CI_PROJECT_DIR/.m2/repository
    -Dorg.slf4j.simpleLogger.showDateTime=true
    -Djava.awt.headless=true

  MAVEN_CLI_OPTS: >-
    --batch-mode
    --errors
    --fail-at-end
    --show-version
    --no-transfer-progress
    -DinstallAtEnd=true
    -DdeployAtEnd=true

cache:
  paths:
    - .m2/repository

stages:
  - build
  - test
  - publish
  - deploy
  - rollback
  - publish_database
  - deploy_database

build:
  stage: build
  script:
    - mvn clean install -DskipTests  -Ptest
  artifacts:
    paths:
      - $CI_PROJECT_DIR
  rules:
    - if: '$CI_PIPELINE_SOURCE != "web" && ($CI_COMMIT_BRANCH == "master" || $CI_COMMIT_BRANCH == "staging")'

test:
  stage: test
  script:
    - mvn verify $MAVEN_OPTS -Ptest
    - cat target/site/jacoco/index.html | grep -o '<tfoot>.*</tfoot>'
  coverage: '/Total.*?([0-9]{1,3})%/'
  artifacts:
    paths:
      - target/site/jacoco/*
    reports:
      junit:
        - "**/target/surefire-reports/TEST-*.xml"
        - "**/target/failsafe-reports/TEST-*.xml"
    expire_in: 1 hour
  rules:
    - if: '$CI_PIPELINE_SOURCE != "web" && ($CI_COMMIT_BRANCH == "master" || $CI_COMMIT_BRANCH == "staging")'

sonarcloud-check:
  stage: test
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script:
    - mvn verify sonar:sonar -Dsonar.projectKey=dombo99_goatspec-api
  rules:
    - if: '$CI_PIPELINE_SOURCE != "web" && ($CI_COMMIT_BRANCH == "master" || $CI_COMMIT_BRANCH == "staging")'

publish:
  image: docker:latest
  stage: publish
  services:
    - docker:dind
  before_script:
    - export  IMAGE_TAG=`if [ $CI_COMMIT_BRANCH == "master" ]; then echo $CI_COMMIT_SHORT_SHA; else echo $CI_COMMIT_TAG; fi;`
    - docker login -u "$CI_DOCKER_HUB_USER" -p "$CI_DOCKER_HUB_PASSWORD" $CI_DOCKER_HUB_URL
  script:
    - docker build --build-arg SPRING_PROFILES_ACTIVE=$PROFILES_ACTIVE --build-arg PORT=$PORT --build-arg APP_VERSION=$IMAGE_TAG --build-arg APP_SERVER_URL=$APP_SERVER_URL --build-arg APP_SECRET=$APP_SECRET --build-arg APP_ENVIRONMENT=$APP_ENVIRONMENT --build-arg APP_EMAIL_SENDER=$APP_EMAIL_SENDER --build-arg APP_EMAIL_PASSWORD=$APP_EMAIL_PASSWORD --build-arg SPRING_APPLICATION_NAME=$APPLICATION_NAME --build-arg SPRING_DATASOURCE_URL=$DATASOURCE_URL --build-arg SPRING_DATASOURCE_USERNAME=$DATASOURCE_USERNAME --build-arg SPRING_DATASOURCE_PASSWORD=$DATASOURCE_PASSWORD --build-arg SPRING_JPA_SHOW_SQL=$SPRING_JPA_SHOW_SQL -t $DOCKER_USER_APPLICATION_NAME:$IMAGE_TAG .


    - docker push $DOCKER_USER_APPLICATION_NAME:$IMAGE_TAG
  rules:
    - if: '$CI_PIPELINE_SOURCE != "web" && ($CI_COMMIT_BRANCH == "main" || $CI_COMMIT_BRANCH == "staging")'

deploy:
  stage: deploy
  before_script:
    - |
      if ($env:CI_COMMIT_BRANCH -eq "master") {
        $env:IMAGE_TAG = $env:CI_COMMIT_SHORT_SHA
      } else {
        $env:IMAGE_TAG = $env:CI_COMMIT_TAG
      }
  script:
    - ./deploy-gcp.sh  $HEROKU_APP_NAME $DOCKER_USER_APPLICATION_NAME $IMAGE_TAG $APPLICATION_NAME
  rules:
    - if: '$CI_PIPELINE_SOURCE != "web" && ($CI_COMMIT_BRANCH == "master" || $CI_COMMIT_BRANCH == "staging")'
  tags:
    - heroku

rollback:
  stage: rollback
  script:
    - ./deploy-gcp.sh $HEROKU_APP_NAME $DOCKER_USER_APPLICATION_NAME $VERSION $APPLICATION_NAME
  when: manual
  variables:
    VERSION: ''
  rules:
    - if: '$CI_PIPELINE_SOURCE == "web"'
  tags:
    - heroku